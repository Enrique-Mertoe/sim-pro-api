# Generated by Django 5.2.5 on 2025-09-23 18:30

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BatchMetadata',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('batch_id', models.TextField()),
                ('order_number', models.TextField(blank=True, null=True)),
                ('requisition_number', models.TextField(blank=True, null=True)),
                ('company_name', models.TextField(blank=True, null=True)),
                ('collection_point', models.TextField(blank=True, null=True)),
                ('move_order_number', models.TextField(blank=True, null=True)),
                ('date_created', models.TextField(blank=True, null=True)),
                ('lot_numbers', models.JSONField(default=list)),
                ('item_description', models.TextField(blank=True, null=True)),
                ('quantity', models.IntegerField(blank=True, null=True)),
                ('teams', models.JSONField(default=list)),
            ],
            options={
                'db_table': 'batch_metadata',
            },
        ),
        migrations.CreateModel(
            name='Config',
            fields=[
                ('key', models.TextField(primary_key=True, serialize=False)),
                ('value', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'config',
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('price_monthly', models.IntegerField()),
                ('price_annual', models.IntegerField()),
                ('features', models.JSONField(default=list)),
                ('is_recommended', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'subscription_plans',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.TextField()),
                ('region', models.TextField()),
                ('territory', models.TextField(blank=True, null=True)),
                ('van_number_plate', models.TextField(blank=True, null=True)),
                ('van_location', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'teams',
            },
        ),
        migrations.CreateModel(
            name='SSMAuthUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email_confirmed', models.BooleanField(default=False)),
                ('phone_confirmed', models.BooleanField(default=False)),
                ('email_confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('phone_confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('confirmation_token', models.TextField(blank=True, null=True)),
                ('recovery_token', models.TextField(blank=True, null=True)),
                ('email_change_token', models.TextField(blank=True, null=True)),
                ('new_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('invited_at', models.DateTimeField(blank=True, null=True)),
                ('confirmation_sent_at', models.DateTimeField(blank=True, null=True)),
                ('recovery_sent_at', models.DateTimeField(blank=True, null=True)),
                ('email_change_sent_at', models.DateTimeField(blank=True, null=True)),
                ('new_phone', models.TextField(blank=True, null=True)),
                ('phone_change_token', models.TextField(blank=True, null=True)),
                ('phone_change_sent_at', models.DateTimeField(blank=True, null=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('email_change_confirm_status', models.SmallIntegerField(default=0)),
                ('banned_until', models.DateTimeField(blank=True, null=True)),
                ('phone', models.TextField(blank=True, null=True)),
                ('raw_app_meta_data', models.JSONField(blank=True, default=dict)),
                ('raw_user_meta_data', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('full_name', models.TextField()),
                ('id_number', models.TextField()),
                ('id_front_url', models.TextField()),
                ('id_back_url', models.TextField()),
                ('phone_number', models.TextField(blank=True, null=True)),
                ('mobigo_number', models.TextField(blank=True, null=True)),
                ('role', models.TextField()),
                ('staff_type', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('last_login_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.TextField(default='ACTIVE')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('username', models.TextField(blank=True, null=True)),
                ('is_first_login', models.BooleanField(default=False)),
                ('password', models.CharField(blank=True, max_length=255, null=True)),
                ('soft_delete', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('admin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ssm.user')),
                ('team', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ssm.team')),
            ],
            options={
                'db_table': 'users',
            },
        ),
        migrations.AddField(
            model_name='team',
            name='admin',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='administered_teams', to='ssm.user'),
        ),
        migrations.AddField(
            model_name='team',
            name='leader',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='led_teams', to='ssm.user'),
        ),
        migrations.CreateModel(
            name='TaskStatus',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=20)),
                ('progress', models.IntegerField(default=0)),
                ('total_records', models.IntegerField(default=0)),
                ('processed_records', models.IntegerField(default=0)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ssm.user')),
            ],
            options={
                'db_table': 'task_status',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('plan_id', models.UUIDField()),
                ('status', models.TextField(default='active')),
                ('starts_at', models.DateTimeField()),
                ('expires_at', models.DateTimeField()),
                ('payment_reference', models.TextField(blank=True, null=True)),
                ('auto_renew', models.BooleanField(default=False)),
                ('cancellation_date', models.DateTimeField(blank=True, null=True)),
                ('cancellation_reason', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ssm.user')),
            ],
            options={
                'db_table': 'subscriptions',
            },
        ),
        migrations.CreateModel(
            name='SimCardTransfer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.TextField(default='PENDING')),
                ('reason', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('sim_cards', models.JSONField()),
                ('destination_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_transfers', to='ssm.team')),
                ('source_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_transfers', to='ssm.team')),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_transfers', to='ssm.user')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_transfers', to='ssm.user')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_transfers', to='ssm.user')),
            ],
            options={
                'db_table': 'sim_card_transfers',
            },
        ),
        migrations.CreateModel(
            name='SimCard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('serial_number', models.TextField()),
                ('sale_date', models.DateTimeField(blank=True, null=True)),
                ('sale_location', models.TextField(blank=True, null=True)),
                ('activation_date', models.DateTimeField(blank=True, null=True)),
                ('top_up_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('top_up_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.TextField(default='PENDING')),
                ('region', models.TextField(blank=True, null=True)),
                ('fraud_flag', models.BooleanField(default=False)),
                ('fraud_reason', models.TextField(blank=True, null=True)),
                ('quality', models.TextField(default='NONQUALITY')),
                ('match', models.TextField(default='N')),
                ('assigned_on', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('registered_on', models.DateTimeField(blank=True, null=True)),
                ('usage', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('in_transit', models.BooleanField(default=False)),
                ('lot', models.TextField(blank=True, null=True)),
                ('ba_msisdn', models.TextField(blank=True, null=True)),
                ('mobigo', models.TextField(blank=True, null=True)),
                ('batch', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='sim_cards', to='ssm.batchmetadata')),
                ('team', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ssm.team')),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_sim_cards', to='ssm.user')),
                ('assigned_to_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_sim_cards', to='ssm.user')),
                ('registered_by_user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='registered_sim_cards', to='ssm.user')),
                ('sold_by_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sold_sim_cards', to='ssm.user')),
            ],
            options={
                'db_table': 'sim_cards',
            },
        ),
        migrations.CreateModel(
            name='SecurityRequestLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('request_id', models.UUIDField(default=uuid.uuid4)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('referer', models.TextField(blank=True, null=True)),
                ('origin', models.TextField(blank=True, null=True)),
                ('method', models.CharField(max_length=10)),
                ('path', models.TextField()),
                ('query_params', models.JSONField(blank=True, null=True)),
                ('headers', models.JSONField(blank=True, null=True)),
                ('body_size', models.IntegerField(blank=True, null=True)),
                ('country', models.CharField(blank=True, max_length=2, null=True)),
                ('region', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('asn', models.IntegerField(blank=True, null=True)),
                ('isp', models.CharField(blank=True, max_length=255, null=True)),
                ('threat_level', models.CharField(default='safe', max_length=20)),
                ('threat_categories', models.JSONField(blank=True, null=True)),
                ('risk_score', models.IntegerField(default=0)),
                ('confidence_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('signature_matches', models.JSONField(blank=True, null=True)),
                ('behavioral_flags', models.JSONField(blank=True, null=True)),
                ('anomaly_score', models.DecimalField(decimal_places=4, default=0.0, max_digits=5)),
                ('response_status', models.IntegerField(blank=True, null=True)),
                ('response_time_ms', models.IntegerField(blank=True, null=True)),
                ('blocked', models.BooleanField(default=False)),
                ('challenge_issued', models.BooleanField(default=False)),
                ('session_id', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ssm.user')),
            ],
            options={
                'db_table': 'security_request_logs',
            },
        ),
        migrations.CreateModel(
            name='PaymentRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reference', models.TextField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('plan_id', models.TextField()),
                ('phone_number', models.TextField()),
                ('status', models.TextField(default='pending')),
                ('provider_id', models.TextField(blank=True, null=True)),
                ('checkout_url', models.TextField(blank=True, null=True)),
                ('transaction_id', models.TextField(blank=True, null=True)),
                ('payment_method', models.TextField(blank=True, null=True)),
                ('payment_details', models.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ssm.user')),
            ],
            options={
                'db_table': 'payment_requests',
            },
        ),
        migrations.CreateModel(
            name='PasswordResetRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('used', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ssm.user')),
            ],
            options={
                'db_table': 'password_reset_requests',
            },
        ),
        migrations.CreateModel(
            name='OnboardingRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('request_type', models.TextField(default='')),
                ('review_notes', models.TextField(blank=True, null=True)),
                ('review_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.TextField(default='pending')),
                ('user_data', models.JSONField(default=dict, help_text='User details as JSON: full_name, id_number, id_front_url, id_back_url, phone_number, mobigo_number, role, team_id, staff_type, email, username, etc.')),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_onboarding_requests', to='ssm.user')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='onboarding_requests', to='ssm.user')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_requests', to='ssm.user')),
            ],
            options={
                'db_table': 'onboarding_requests',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.TextField()),
                ('message', models.TextField()),
                ('type', models.TextField()),
                ('read', models.BooleanField(default=False)),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ssm.user')),
            ],
            options={
                'db_table': 'notifications',
            },
        ),
        migrations.CreateModel(
            name='ForumTopic',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.TextField()),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_closed', models.BooleanField(default=False)),
                ('view_count', models.IntegerField(default=0)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forum_topics', to='ssm.user')),
            ],
            options={
                'db_table': 'forum_topics',
            },
        ),
        migrations.CreateModel(
            name='ForumPost',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='ssm.forumtopic')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forum_posts', to='ssm.user')),
            ],
            options={
                'db_table': 'forum_posts',
            },
        ),
        migrations.AddField(
            model_name='batchmetadata',
            name='admin',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='admin_batches', to='ssm.user'),
        ),
        migrations.AddField(
            model_name='batchmetadata',
            name='created_by_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ssm.user'),
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('action_type', models.TextField()),
                ('details', models.JSONField()),
                ('ip_address', models.TextField(blank=True, null=True)),
                ('device_info', models.TextField(blank=True, null=True)),
                ('is_offline_action', models.BooleanField(default=False)),
                ('sync_date', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ssm.user')),
            ],
            options={
                'db_table': 'activity_logs',
            },
        ),
        migrations.CreateModel(
            name='LotMetadata',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('lot_number', models.TextField()),
                ('serial_numbers', models.JSONField(default=list)),
                ('assigned_on', models.DateTimeField(blank=True, null=True)),
                ('status', models.TextField(default='PENDING')),
                ('total_sims', models.IntegerField()),
                ('quality_count', models.IntegerField(default=0)),
                ('nonquality_count', models.IntegerField(default=0)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lots', to='ssm.batchmetadata')),
                ('assigned_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ssm.team')),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_lots', to='ssm.user')),
            ],
            options={
                'db_table': 'lot_metadata',
                'unique_together': {('batch', 'lot_number')},
            },
        ),
        migrations.CreateModel(
            name='ForumLike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ssm.forumpost')),
                ('topic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ssm.forumtopic')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ssm.user')),
            ],
            options={
                'db_table': 'forum_likes',
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('topic__isnull', False), ('post__isnull', True)), models.Q(('topic__isnull', True), ('post__isnull', False)), _connector='OR'), name='topic_or_post_required')],
            },
        ),
    ]
