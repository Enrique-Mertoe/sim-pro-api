# Generated by Django 5.2.5 on 2025-10-08 01:26

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BatchMetadata',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('batch_id', models.CharField(max_length=100)),
                ('order_number', models.CharField(blank=True, max_length=100, null=True)),
                ('requisition_number', models.CharField(blank=True, max_length=100, null=True)),
                ('company_name', models.CharField(blank=True, max_length=255, null=True)),
                ('collection_point', models.CharField(blank=True, max_length=255, null=True)),
                ('move_order_number', models.CharField(blank=True, max_length=100, null=True)),
                ('date_created', models.CharField(blank=True, max_length=50, null=True)),
                ('lot_numbers', models.JSONField(default=list)),
                ('item_description', models.TextField(blank=True, null=True)),
                ('quantity', models.IntegerField(blank=True, null=True)),
                ('teams', models.JSONField(default=list)),
            ],
            options={
                'db_table': 'batch_metadata',
            },
        ),
        migrations.CreateModel(
            name='Config',
            fields=[
                ('key', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('value', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'config',
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('price_monthly', models.IntegerField()),
                ('price_annual', models.IntegerField()),
                ('features', models.JSONField(default=list)),
                ('is_recommended', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'subscription_plans',
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('supplier_code', models.CharField(max_length=50, unique=True)),
                ('supplier_name', models.CharField(max_length=200)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended')], default='active', max_length=20)),
                ('contact_person', models.CharField(blank=True, max_length=200, null=True)),
                ('phone_number', models.CharField(max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('alternative_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.TextField()),
                ('city', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('business_registration_number', models.CharField(blank=True, max_length=100, null=True)),
                ('tax_pin', models.CharField(blank=True, max_length=50, null=True)),
                ('payment_terms', models.CharField(blank=True, help_text='e.g., Net 30, Net 60', max_length=100, null=True)),
                ('credit_limit', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('current_balance', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('rating', models.DecimalField(blank=True, decimal_places=2, help_text='Rating out of 5', max_digits=3, null=True)),
                ('total_purchases', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('notes', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict)),
            ],
            options={
                'db_table': 'suppliers',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=255)),
                ('region', models.CharField(max_length=100)),
                ('territory', models.CharField(blank=True, max_length=100, null=True)),
                ('van_number_plate', models.CharField(blank=True, max_length=20, null=True)),
                ('van_location', models.CharField(blank=True, max_length=255, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'teams',
            },
        ),
        migrations.CreateModel(
            name='SSMAuthUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email_confirmed', models.BooleanField(default=False)),
                ('needs_password_reset', models.BooleanField(default=False)),
                ('phone_confirmed', models.BooleanField(default=False)),
                ('email_confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('phone_confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('confirmation_token', models.CharField(blank=True, max_length=500, null=True)),
                ('recovery_token', models.CharField(blank=True, max_length=500, null=True)),
                ('email_change_token', models.CharField(blank=True, max_length=500, null=True)),
                ('new_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('invited_at', models.DateTimeField(blank=True, null=True)),
                ('confirmation_sent_at', models.DateTimeField(blank=True, null=True)),
                ('recovery_sent_at', models.DateTimeField(blank=True, null=True)),
                ('email_change_sent_at', models.DateTimeField(blank=True, null=True)),
                ('new_phone', models.CharField(blank=True, max_length=50, null=True)),
                ('phone_change_token', models.CharField(blank=True, max_length=500, null=True)),
                ('phone_change_sent_at', models.DateTimeField(blank=True, null=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('email_change_confirm_status', models.SmallIntegerField(default=0)),
                ('banned_until', models.DateTimeField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=50, null=True)),
                ('raw_app_meta_data', models.JSONField(blank=True, default=dict)),
                ('raw_user_meta_data', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PasswordResetRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token', models.CharField(max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('used', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'password_reset_requests',
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('icon', models.CharField(blank=True, max_length=50, null=True)),
                ('color', models.CharField(blank=True, max_length=20, null=True)),
                ('display_order', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('parent_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subcategories', to='ssm.productcategory')),
            ],
            options={
                'verbose_name_plural': 'Product Categories',
                'db_table': 'product_categories',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product_code', models.CharField(max_length=50, unique=True)),
                ('product_name', models.CharField(max_length=200)),
                ('model', models.CharField(blank=True, max_length=100, null=True)),
                ('brand', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('discontinued', 'Discontinued')], default='active', max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('specifications', models.JSONField(default=dict, help_text='Product technical specifications')),
                ('cost_price', models.DecimalField(decimal_places=2, default=0, help_text='Purchase/cost price', max_digits=12)),
                ('selling_price', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('retail_price', models.DecimalField(blank=True, decimal_places=2, help_text='Recommended retail price', max_digits=12, null=True)),
                ('total_stock', models.IntegerField(default=0, help_text='Total stock across all shops')),
                ('reorder_level', models.IntegerField(default=0, help_text='Minimum stock level before alert')),
                ('reorder_quantity', models.IntegerField(default=0, help_text='Quantity to reorder')),
                ('image_url', models.URLField(blank=True, null=True)),
                ('thumbnail_url', models.URLField(blank=True, null=True)),
                ('images', models.JSONField(default=list, help_text='Array of image URLs')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kg', max_digits=8, null=True)),
                ('dimensions', models.JSONField(blank=True, default=dict, help_text='Length, width, height in cm', null=True)),
                ('warranty_period', models.IntegerField(blank=True, help_text='Warranty period in months', null=True)),
                ('warranty_details', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict)),
                ('notes', models.TextField(blank=True, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='products', to='ssm.productcategory')),
                ('default_supplier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='supplied_products', to='ssm.supplier')),
            ],
            options={
                'db_table': 'products',
            },
        ),
        migrations.CreateModel(
            name='Shop',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('shop_code', models.CharField(help_text='Unique shop identifier', max_length=50, unique=True)),
                ('shop_name', models.CharField(max_length=200)),
                ('shop_type', models.CharField(choices=[('franchise', 'Franchise'), ('company_owned', 'Company Owned'), ('dealer', 'Dealer'), ('agent', 'Agent'), ('kiosk', 'Kiosk'), ('mall_counter', 'Mall Counter'), ('supermarket', 'Supermarket')], default='agent', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended'), ('pending_approval', 'Pending Approval'), ('closed', 'Closed')], default='pending_approval', max_length=20)),
                ('address', models.TextField()),
                ('city', models.CharField(max_length=100)),
                ('region', models.CharField(max_length=100)),
                ('county', models.CharField(blank=True, max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('phone_number', models.CharField(max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('alternative_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('business_registration_number', models.CharField(blank=True, max_length=100, null=True)),
                ('tax_pin', models.CharField(blank=True, max_length=50, null=True)),
                ('business_license_url', models.URLField(blank=True, null=True)),
                ('opening_hours', models.JSONField(default=dict, help_text='Store opening hours by day')),
                ('credit_limit', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('current_balance', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('commission_rate', models.DecimalField(decimal_places=2, default=0, help_text='Commission percentage', max_digits=5)),
                ('metadata', models.JSONField(default=dict, help_text='Additional shop-specific data')),
                ('notes', models.TextField(blank=True, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ssm.team')),
            ],
            options={
                'db_table': 'shops',
            },
        ),
        migrations.CreateModel(
            name='TeamMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('performance', models.JSONField(blank=True, default=dict, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('team', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='ssm.team')),
            ],
            options={
                'db_table': 'team_metadata',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('full_name', models.CharField(max_length=255)),
                ('id_number', models.CharField(max_length=50)),
                ('id_front_url', models.URLField(max_length=500)),
                ('id_back_url', models.URLField(max_length=500)),
                ('phone_number', models.CharField(blank=True, max_length=50, null=True)),
                ('mobigo_number', models.CharField(blank=True, max_length=50, null=True)),
                ('role', models.CharField(max_length=50)),
                ('staff_type', models.CharField(blank=True, max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('last_login_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(default='ACTIVE', max_length=20)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('username', models.CharField(blank=True, max_length=150, null=True)),
                ('is_first_login', models.BooleanField(default=False)),
                ('password', models.CharField(blank=True, max_length=255, null=True)),
                ('soft_delete', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('admin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ssm.user')),
                ('auth_user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('team', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ssm.team')),
            ],
            options={
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='TeamGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='ssm.team')),
                ('admin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='admin_team_groups', to='ssm.user')),
            ],
            options={
                'db_table': 'team_groups',
                'unique_together': {('team', 'name')},
            },
        ),
        migrations.AddField(
            model_name='team',
            name='admin',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='administered_teams', to='ssm.user'),
        ),
        migrations.AddField(
            model_name='team',
            name='leader',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='led_teams', to='ssm.user'),
        ),
        migrations.CreateModel(
            name='TaskStatus',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=20)),
                ('progress', models.IntegerField(default=0)),
                ('total_records', models.IntegerField(default=0)),
                ('processed_records', models.IntegerField(default=0)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ssm.user')),
            ],
            options={
                'db_table': 'task_status',
            },
        ),
        migrations.AddField(
            model_name='supplier',
            name='admin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_suppliers', to='ssm.user'),
        ),
        migrations.AddField(
            model_name='supplier',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_suppliers', to='ssm.user'),
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('plan_id', models.UUIDField()),
                ('status', models.CharField(default='active', max_length=20)),
                ('starts_at', models.DateTimeField()),
                ('expires_at', models.DateTimeField()),
                ('payment_reference', models.CharField(blank=True, max_length=100, null=True)),
                ('auto_renew', models.BooleanField(default=False)),
                ('cancellation_date', models.DateTimeField(blank=True, null=True)),
                ('cancellation_reason', models.TextField(blank=True, null=True)),
                ('is_trial', models.BooleanField(default=False)),
                ('trial_ends_at', models.DateTimeField(blank=True, null=True)),
                ('trial_days', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ssm.user')),
            ],
            options={
                'db_table': 'subscriptions',
            },
        ),
        migrations.CreateModel(
            name='StockMovement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reference_number', models.CharField(max_length=50, unique=True)),
                ('movement_type', models.CharField(choices=[('stock_in', 'Stock In'), ('stock_out', 'Stock Out'), ('sale', 'Sale'), ('return', 'Return'), ('transfer_in', 'Transfer In'), ('transfer_out', 'Transfer Out'), ('adjustment', 'Adjustment'), ('damage', 'Damage'), ('expired', 'Expired')], max_length=20)),
                ('movement_date', models.DateTimeField(auto_now_add=True)),
                ('quantity', models.IntegerField()),
                ('unit_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('total_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('stock_before', models.IntegerField()),
                ('stock_after', models.IntegerField()),
                ('purchase_order_number', models.CharField(blank=True, max_length=50, null=True)),
                ('invoice_number', models.CharField(blank=True, max_length=50, null=True)),
                ('delivery_note', models.CharField(blank=True, max_length=50, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_movements', to='ssm.product')),
                ('shop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_movements', to='ssm.shop')),
                ('supplier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_movements', to='ssm.supplier')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_stock_movements', to='ssm.user')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_stock_movements', to='ssm.user')),
            ],
            options={
                'db_table': 'stock_movements',
            },
        ),
        migrations.CreateModel(
            name='SimCardTransfer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(default='PENDING', max_length=20)),
                ('reason', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('sim_cards', models.JSONField()),
                ('destination_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_transfers', to='ssm.team')),
                ('source_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_transfers', to='ssm.team')),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_transfers', to='ssm.user')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_transfers', to='ssm.user')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_transfers', to='ssm.user')),
            ],
            options={
                'db_table': 'sim_card_transfers',
            },
        ),
        migrations.CreateModel(
            name='SimCard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('serial_number', models.CharField(max_length=50)),
                ('sale_date', models.DateTimeField(blank=True, null=True)),
                ('sale_location', models.CharField(blank=True, max_length=255, null=True)),
                ('activation_date', models.DateTimeField(blank=True, null=True)),
                ('top_up_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('top_up_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(default='PENDING', max_length=20)),
                ('region', models.CharField(blank=True, max_length=100, null=True)),
                ('fraud_flag', models.BooleanField(default=False)),
                ('fraud_reason', models.TextField(blank=True, null=True)),
                ('quality', models.CharField(default='NONQUALITY', max_length=20)),
                ('match', models.CharField(default='N', max_length=1)),
                ('assigned_on', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('registered_on', models.DateTimeField(blank=True, null=True)),
                ('usage', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('in_transit', models.BooleanField(default=False)),
                ('lot', models.CharField(blank=True, max_length=50, null=True)),
                ('ba_msisdn', models.CharField(blank=True, max_length=50, null=True)),
                ('mobigo', models.CharField(blank=True, max_length=50, null=True)),
                ('batch', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='sim_cards', to='ssm.batchmetadata')),
                ('team', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ssm.team')),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_sim_cards', to='ssm.user')),
                ('assigned_to_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_sim_cards', to='ssm.user')),
                ('registered_by_user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='registered_sim_cards', to='ssm.user')),
                ('sold_by_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sold_sim_cards', to='ssm.user')),
            ],
            options={
                'db_table': 'sim_cards',
            },
        ),
        migrations.CreateModel(
            name='ShopTransfer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('transfer_reference', models.CharField(max_length=50, unique=True)),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('reason', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('in_transit', 'In Transit'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True, null=True)),
                ('dispatch_date', models.DateTimeField(blank=True, null=True)),
                ('expected_delivery_date', models.DateTimeField(blank=True, null=True)),
                ('received_date', models.DateTimeField(blank=True, null=True)),
                ('sim_cards', models.JSONField(default=list, help_text='List of SIM card serial numbers')),
                ('total_quantity', models.IntegerField(default=0)),
                ('received_quantity', models.IntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('destination_shop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_shop_transfers', to='ssm.shop')),
                ('source_shop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_shop_transfers', to='ssm.shop')),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_shop_transfers', to='ssm.user')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_shop_transfers', to='ssm.user')),
                ('dispatched_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dispatched_transfers', to='ssm.user')),
                ('received_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_transfers', to='ssm.user')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_shop_transfers', to='ssm.user')),
            ],
            options={
                'db_table': 'shop_transfers',
            },
        ),
        migrations.CreateModel(
            name='ShopTarget',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('target_type', models.CharField(choices=[('sales_volume', 'Sales Volume'), ('revenue', 'Revenue'), ('commission', 'Commission'), ('quality_rate', 'Quality Rate'), ('customer_acquisition', 'Customer Acquisition')], max_length=30)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('period_type', models.CharField(choices=[('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], default='monthly', max_length=20)),
                ('target_value', models.DecimalField(decimal_places=2, max_digits=12)),
                ('current_value', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('achievement_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('is_active', models.BooleanField(default=True)),
                ('is_achieved', models.BooleanField(default=False)),
                ('achievement_date', models.DateField(blank=True, null=True)),
                ('incentive_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('incentive_paid', models.BooleanField(default=False)),
                ('incentive_paid_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('shop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='targets', to='ssm.shop')),
                ('set_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='set_targets', to='ssm.user')),
            ],
            options={
                'db_table': 'shop_targets',
            },
        ),
        migrations.CreateModel(
            name='ShopSales',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sale_reference', models.CharField(max_length=50, unique=True)),
                ('sale_date', models.DateTimeField(auto_now_add=True)),
                ('customer_name', models.CharField(max_length=200)),
                ('customer_phone', models.CharField(max_length=20)),
                ('customer_id_number', models.CharField(max_length=50)),
                ('customer_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('selling_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('commission_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('commission_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('net_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('card', 'Card'), ('mobile_money', 'Mobile Money'), ('bank_transfer', 'Bank Transfer'), ('credit', 'Credit')], default='cash', max_length=20)),
                ('payment_reference', models.CharField(blank=True, max_length=100, null=True)),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('change_given', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('status', models.CharField(choices=[('completed', 'Completed'), ('pending', 'Pending'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], default='completed', max_length=20)),
                ('receipt_number', models.CharField(blank=True, max_length=50, null=True)),
                ('refund_date', models.DateTimeField(blank=True, null=True)),
                ('refund_reason', models.TextField(blank=True, null=True)),
                ('refund_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('shop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sales', to='ssm.shop')),
                ('sim_card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shop_sales', to='ssm.simcard')),
                ('refunded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='refunded_sales', to='ssm.user')),
                ('sold_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shop_sales', to='ssm.user')),
            ],
            options={
                'db_table': 'shop_sales',
            },
        ),
        migrations.CreateModel(
            name='ShopProductInventory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quantity', models.IntegerField(default=0)),
                ('reserved_quantity', models.IntegerField(default=0)),
                ('available_quantity', models.IntegerField(default=0)),
                ('shop_cost_price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('shop_selling_price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('low_stock_alert', models.BooleanField(default=False)),
                ('min_stock_level', models.IntegerField(default=0)),
                ('shelf_location', models.CharField(blank=True, max_length=50, null=True)),
                ('bin_location', models.CharField(blank=True, max_length=50, null=True)),
                ('last_stock_count_date', models.DateTimeField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shop_inventory', to='ssm.product')),
                ('shop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_inventory', to='ssm.shop')),
                ('last_stock_count_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='counted_inventory', to='ssm.user')),
            ],
            options={
                'db_table': 'shop_product_inventory',
            },
        ),
        migrations.CreateModel(
            name='ShopPerformance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('period_type', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], default='monthly', max_length=20)),
                ('total_sales', models.IntegerField(default=0)),
                ('total_revenue', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('total_commission', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('average_sale_value', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('opening_stock', models.IntegerField(default=0)),
                ('stock_received', models.IntegerField(default=0)),
                ('closing_stock', models.IntegerField(default=0)),
                ('stock_returned', models.IntegerField(default=0)),
                ('stock_damaged', models.IntegerField(default=0)),
                ('quality_sales', models.IntegerField(default=0)),
                ('non_quality_sales', models.IntegerField(default=0)),
                ('quality_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('unique_customers', models.IntegerField(default=0)),
                ('repeat_customers', models.IntegerField(default=0)),
                ('customer_satisfaction_score', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('working_days', models.IntegerField(default=0)),
                ('sales_per_day', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('conversion_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('target_sales', models.IntegerField(blank=True, null=True)),
                ('target_revenue', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('achievement_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('additional_metrics', models.JSONField(default=dict)),
                ('shop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_records', to='ssm.shop')),
                ('calculated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calculated_performance', to='ssm.user')),
            ],
            options={
                'db_table': 'shop_performance',
            },
        ),
        migrations.CreateModel(
            name='ShopInventory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('available', 'Available'), ('reserved', 'Reserved'), ('sold', 'Sold'), ('returned', 'Returned'), ('damaged', 'Damaged'), ('expired', 'Expired')], default='available', max_length=20)),
                ('allocated_date', models.DateTimeField(auto_now_add=True)),
                ('sold_date', models.DateTimeField(blank=True, null=True)),
                ('customer_name', models.CharField(blank=True, max_length=200, null=True)),
                ('customer_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('customer_id_number', models.CharField(blank=True, max_length=50, null=True)),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('selling_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('commission_earned', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('return_date', models.DateTimeField(blank=True, null=True)),
                ('return_reason', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('shop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='ssm.shop')),
                ('sim_card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shop_inventory', to='ssm.simcard')),
                ('allocated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocated_inventory', to='ssm.user')),
                ('returned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='returned_inventory', to='ssm.user')),
                ('sold_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sold_inventory', to='ssm.user')),
            ],
            options={
                'db_table': 'shop_inventory',
            },
        ),
        migrations.CreateModel(
            name='ShopAuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('action_type', models.CharField(choices=[('shop_created', 'Shop Created'), ('shop_updated', 'Shop Updated'), ('inventory_allocated', 'Inventory Allocated'), ('sale_completed', 'Sale Completed'), ('transfer_requested', 'Transfer Requested'), ('transfer_approved', 'Transfer Approved'), ('stock_received', 'Stock Received'), ('target_set', 'Target Set'), ('performance_calculated', 'Performance Calculated'), ('status_changed', 'Status Changed')], max_length=30)),
                ('before_state', models.JSONField(blank=True, null=True)),
                ('after_state', models.JSONField(blank=True, null=True)),
                ('description', models.TextField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('related_object_type', models.CharField(blank=True, max_length=50, null=True)),
                ('related_object_id', models.UUIDField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict)),
                ('shop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audit_logs', to='ssm.shop')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shop_audit_logs', to='ssm.user')),
            ],
            options={
                'db_table': 'shop_audit_logs',
            },
        ),
        migrations.AddField(
            model_name='shop',
            name='admin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_shops', to='ssm.user'),
        ),
        migrations.AddField(
            model_name='shop',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_shops', to='ssm.user'),
        ),
        migrations.AddField(
            model_name='shop',
            name='owner',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owner_shops', to='ssm.user'),
        ),
        migrations.AddField(
            model_name='shop',
            name='shop_manager',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_shops', to='ssm.user'),
        ),
        migrations.AddField(
            model_name='shop',
            name='verified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_shops', to='ssm.user'),
        ),
        migrations.CreateModel(
            name='SecurityRequestLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('request_id', models.UUIDField(default=uuid.uuid4)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('referer', models.TextField(blank=True, null=True)),
                ('origin', models.TextField(blank=True, null=True)),
                ('method', models.CharField(max_length=10)),
                ('path', models.TextField()),
                ('query_params', models.JSONField(blank=True, null=True)),
                ('headers', models.JSONField(blank=True, null=True)),
                ('body_size', models.IntegerField(blank=True, null=True)),
                ('country', models.CharField(blank=True, max_length=2, null=True)),
                ('region', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('asn', models.IntegerField(blank=True, null=True)),
                ('isp', models.CharField(blank=True, max_length=255, null=True)),
                ('threat_level', models.CharField(default='safe', max_length=20)),
                ('threat_categories', models.JSONField(blank=True, null=True)),
                ('risk_score', models.IntegerField(default=0)),
                ('confidence_score', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('signature_matches', models.JSONField(blank=True, null=True)),
                ('behavioral_flags', models.JSONField(blank=True, null=True)),
                ('anomaly_score', models.DecimalField(decimal_places=4, default=0.0, max_digits=5)),
                ('response_status', models.IntegerField(blank=True, null=True)),
                ('response_time_ms', models.IntegerField(blank=True, null=True)),
                ('blocked', models.BooleanField(default=False)),
                ('challenge_issued', models.BooleanField(default=False)),
                ('session_id', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ssm.user')),
            ],
            options={
                'db_table': 'security_request_logs',
            },
        ),
        migrations.CreateModel(
            name='PurchaseOrder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('po_number', models.CharField(max_length=50, unique=True)),
                ('po_date', models.DateField()),
                ('expected_delivery_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending'), ('approved', 'Approved'), ('ordered', 'Ordered'), ('partial', 'Partially Received'), ('received', 'Received'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('subtotal', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('shipping_cost', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('total_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('items', models.JSONField(default=list, help_text='Array of order items')),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('actual_delivery_date', models.DateField(blank=True, null=True)),
                ('delivery_notes', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict)),
                ('shop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchase_orders', to='ssm.shop')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='purchase_orders', to='ssm.supplier')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_purchase_orders', to='ssm.user')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_purchase_orders', to='ssm.user')),
            ],
            options={
                'db_table': 'purchase_orders',
            },
        ),
        migrations.CreateModel(
            name='ProductSale',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sale_number', models.CharField(max_length=50, unique=True)),
                ('sale_date', models.DateTimeField(auto_now_add=True)),
                ('items', models.JSONField(default=list, help_text='Array of sold items with product, quantity, price')),
                ('customer_name', models.CharField(blank=True, max_length=200, null=True)),
                ('customer_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('customer_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('subtotal', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('total_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('card', 'Card'), ('mobile_money', 'Mobile Money'), ('bank_transfer', 'Bank Transfer'), ('credit', 'Credit')], default='cash', max_length=20)),
                ('payment_reference', models.CharField(blank=True, max_length=100, null=True)),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=12)),
                ('change_given', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('status', models.CharField(choices=[('completed', 'Completed'), ('pending', 'Pending'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], default='completed', max_length=20)),
                ('receipt_number', models.CharField(blank=True, max_length=50, null=True)),
                ('refund_date', models.DateTimeField(blank=True, null=True)),
                ('refund_reason', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict)),
                ('shop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_sales', to='ssm.shop')),
                ('refunded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='refunded_product_sales', to='ssm.user')),
                ('sold_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_sales', to='ssm.user')),
            ],
            options={
                'db_table': 'product_sales',
            },
        ),
        migrations.CreateModel(
            name='ProductInstance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('serial_number', models.CharField(max_length=100, unique=True)),
                ('barcode', models.CharField(max_length=100, unique=True)),
                ('status', models.CharField(choices=[('available', 'Available'), ('reserved', 'Reserved'), ('sold', 'Sold'), ('damaged', 'Damaged'), ('returned', 'Returned')], default='available', max_length=20)),
                ('sold_date', models.DateTimeField(blank=True, null=True)),
                ('sale_price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('customer_name', models.CharField(blank=True, max_length=200, null=True)),
                ('customer_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('allocated_date', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='ssm.product')),
                ('current_shop', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_instances', to='ssm.shop')),
                ('allocated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocated_instances', to='ssm.user')),
                ('sold_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sold_instances', to='ssm.user')),
            ],
            options={
                'db_table': 'product_instances',
            },
        ),
        migrations.AddField(
            model_name='productcategory',
            name='admin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_product_categories', to='ssm.user'),
        ),
        migrations.AddField(
            model_name='product',
            name='admin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_products', to='ssm.user'),
        ),
        migrations.AddField(
            model_name='product',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_products', to='ssm.user'),
        ),
        migrations.CreateModel(
            name='PaymentRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reference', models.CharField(max_length=100)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('plan_id', models.CharField(max_length=100)),
                ('phone_number', models.CharField(max_length=50)),
                ('status', models.CharField(default='pending', max_length=20)),
                ('provider_id', models.CharField(blank=True, max_length=100, null=True)),
                ('checkout_url', models.URLField(blank=True, max_length=500, null=True)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('payment_method', models.CharField(blank=True, max_length=50, null=True)),
                ('payment_details', models.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ssm.user')),
            ],
            options={
                'db_table': 'payment_requests',
            },
        ),
        migrations.CreateModel(
            name='OnboardingRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('request_type', models.CharField(default='', max_length=50)),
                ('review_notes', models.TextField(blank=True, null=True)),
                ('review_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(default='pending', max_length=20)),
                ('user_data', models.JSONField(default=dict, help_text='User details as JSON: full_name, id_number, id_front_url, id_back_url, phone_number, mobigo_number, role, team_id, staff_type, email, username, etc.')),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_onboarding_requests', to='ssm.user')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='onboarding_requests', to='ssm.user')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_requests', to='ssm.user')),
            ],
            options={
                'db_table': 'onboarding_requests',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('type', models.CharField(max_length=50)),
                ('read', models.BooleanField(default=False)),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ssm.user')),
            ],
            options={
                'db_table': 'notifications',
            },
        ),
        migrations.CreateModel(
            name='LotMetadata',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('lot_number', models.CharField(max_length=100)),
                ('serial_numbers', models.JSONField(default=list)),
                ('assigned_on', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(default='PENDING', max_length=20)),
                ('total_sims', models.IntegerField()),
                ('quality_count', models.IntegerField(default=0)),
                ('nonquality_count', models.IntegerField(default=0)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lots', to='ssm.batchmetadata')),
                ('assigned_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ssm.team')),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_lots', to='ssm.user')),
            ],
            options={
                'db_table': 'lot_metadata',
            },
        ),
        migrations.CreateModel(
            name='ForumTopic',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=500)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_closed', models.BooleanField(default=False)),
                ('view_count', models.IntegerField(default=0)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forum_topics', to='ssm.user')),
            ],
            options={
                'db_table': 'forum_topics',
            },
        ),
        migrations.CreateModel(
            name='ForumPost',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='ssm.forumtopic')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forum_posts', to='ssm.user')),
            ],
            options={
                'db_table': 'forum_posts',
            },
        ),
        migrations.CreateModel(
            name='ForumLike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ssm.forumpost')),
                ('topic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ssm.forumtopic')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ssm.user')),
            ],
            options={
                'db_table': 'forum_likes',
            },
        ),
        migrations.CreateModel(
            name='BusinessInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dealer_code', models.CharField(max_length=191, unique=True)),
                ('contact_phone', models.CharField(blank=True, max_length=50, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('admin', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='business_info', to='ssm.user')),
            ],
            options={
                'db_table': 'business_info',
            },
        ),
        migrations.AddField(
            model_name='batchmetadata',
            name='admin',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='admin_batches', to='ssm.user'),
        ),
        migrations.AddField(
            model_name='batchmetadata',
            name='created_by_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ssm.user'),
        ),
        migrations.CreateModel(
            name='AdminOnboarding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email_verified', models.BooleanField(default=False)),
                ('profile_completed', models.BooleanField(default=False)),
                ('business_info_completed', models.BooleanField(default=False)),
                ('system_tour_completed', models.BooleanField(default=False)),
                ('onboarding_completed', models.BooleanField(default=False)),
                ('billing_active', models.BooleanField(default=False)),
                ('billing_start_date', models.DateTimeField(blank=True, null=True)),
                ('email_verified_at', models.DateTimeField(blank=True, null=True)),
                ('profile_completed_at', models.DateTimeField(blank=True, null=True)),
                ('business_info_completed_at', models.DateTimeField(blank=True, null=True)),
                ('system_tour_completed_at', models.DateTimeField(blank=True, null=True)),
                ('onboarding_completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('admin', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='onboarding_status', to='ssm.user')),
            ],
            options={
                'db_table': 'admin_onboarding',
            },
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('action_type', models.CharField(max_length=100)),
                ('details', models.JSONField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('device_info', models.TextField(blank=True, null=True)),
                ('is_offline_action', models.BooleanField(default=False)),
                ('sync_date', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ssm.user')),
            ],
            options={
                'db_table': 'activity_logs',
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email_notifications', models.BooleanField(default=True)),
                ('sms_notifications', models.BooleanField(default=True)),
                ('push_notifications', models.BooleanField(default=True)),
                ('marketing_emails', models.BooleanField(default=False)),
                ('security_alerts', models.BooleanField(default=True)),
                ('report_notifications', models.BooleanField(default=True)),
                ('team_updates', models.BooleanField(default=True)),
                ('profile_visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('team_only', 'Team Only')], default='team_only', max_length=20)),
                ('show_email', models.BooleanField(default=False)),
                ('show_phone', models.BooleanField(default=False)),
                ('data_sharing', models.BooleanField(default=False)),
                ('activity_tracking', models.BooleanField(default=True)),
                ('two_factor_enabled', models.BooleanField(default=False)),
                ('session_timeout', models.IntegerField(default=30)),
                ('login_alerts', models.BooleanField(default=True)),
                ('language', models.CharField(default='en', max_length=10)),
                ('timezone', models.CharField(default='Africa/Nairobi', max_length=50)),
                ('date_format', models.CharField(default='DD/MM/YYYY', max_length=20)),
                ('theme', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark'), ('auto', 'Auto')], default='auto', max_length=10)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='ssm.user')),
            ],
            options={
                'db_table': 'user_settings',
            },
        ),
        migrations.CreateModel(
            name='TeamGroupMembership',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='ssm.teamgroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_memberships', to='ssm.user')),
            ],
            options={
                'db_table': 'team_group_memberships',
                'unique_together': {('group', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='supplier',
            index=models.Index(fields=['supplier_code'], name='suppliers_supplie_e2938c_idx'),
        ),
        migrations.AddIndex(
            model_name='supplier',
            index=models.Index(fields=['status'], name='suppliers_status_e3c425_idx'),
        ),
        migrations.AddIndex(
            model_name='supplier',
            index=models.Index(fields=['supplier_name'], name='suppliers_supplie_2362cc_idx'),
        ),
        migrations.AddIndex(
            model_name='stockmovement',
            index=models.Index(fields=['reference_number'], name='stock_movem_referen_e83e6e_idx'),
        ),
        migrations.AddIndex(
            model_name='stockmovement',
            index=models.Index(fields=['shop', 'movement_date'], name='stock_movem_shop_id_faeebb_idx'),
        ),
        migrations.AddIndex(
            model_name='stockmovement',
            index=models.Index(fields=['product', 'movement_date'], name='stock_movem_product_363a5e_idx'),
        ),
        migrations.AddIndex(
            model_name='stockmovement',
            index=models.Index(fields=['movement_type'], name='stock_movem_movemen_d922c9_idx'),
        ),
        migrations.AddIndex(
            model_name='shoptransfer',
            index=models.Index(fields=['transfer_reference'], name='shop_transf_transfe_29f5d5_idx'),
        ),
        migrations.AddIndex(
            model_name='shoptransfer',
            index=models.Index(fields=['status'], name='shop_transf_status_c588e0_idx'),
        ),
        migrations.AddIndex(
            model_name='shoptransfer',
            index=models.Index(fields=['source_shop', 'destination_shop'], name='shop_transf_source__e7e183_idx'),
        ),
        migrations.AddIndex(
            model_name='shoptransfer',
            index=models.Index(fields=['request_date'], name='shop_transf_request_3f789e_idx'),
        ),
        migrations.AddIndex(
            model_name='shoptarget',
            index=models.Index(fields=['shop', 'period_start', 'period_end'], name='shop_target_shop_id_69be7c_idx'),
        ),
        migrations.AddIndex(
            model_name='shoptarget',
            index=models.Index(fields=['target_type'], name='shop_target_target__93d067_idx'),
        ),
        migrations.AddIndex(
            model_name='shoptarget',
            index=models.Index(fields=['is_achieved'], name='shop_target_is_achi_cbb102_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='shoptarget',
            unique_together={('shop', 'target_type', 'period_start', 'period_end')},
        ),
        migrations.AddIndex(
            model_name='shopsales',
            index=models.Index(fields=['sale_reference'], name='shop_sales_sale_re_ec54bf_idx'),
        ),
        migrations.AddIndex(
            model_name='shopsales',
            index=models.Index(fields=['shop', 'sale_date'], name='shop_sales_shop_id_7b675c_idx'),
        ),
        migrations.AddIndex(
            model_name='shopsales',
            index=models.Index(fields=['customer_phone'], name='shop_sales_custome_37a4bf_idx'),
        ),
        migrations.AddIndex(
            model_name='shopsales',
            index=models.Index(fields=['status'], name='shop_sales_status_9a056b_idx'),
        ),
        migrations.AddIndex(
            model_name='shopproductinventory',
            index=models.Index(fields=['shop', 'product'], name='shop_produc_shop_id_c3544c_idx'),
        ),
        migrations.AddIndex(
            model_name='shopproductinventory',
            index=models.Index(fields=['low_stock_alert'], name='shop_produc_low_sto_8c695b_idx'),
        ),
        migrations.AddIndex(
            model_name='shopproductinventory',
            index=models.Index(fields=['available_quantity'], name='shop_produc_availab_563701_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='shopproductinventory',
            unique_together={('shop', 'product')},
        ),
        migrations.AddIndex(
            model_name='shopperformance',
            index=models.Index(fields=['shop', 'period_type'], name='shop_perfor_shop_id_029b11_idx'),
        ),
        migrations.AddIndex(
            model_name='shopperformance',
            index=models.Index(fields=['period_start', 'period_end'], name='shop_perfor_period__40540e_idx'),
        ),
        migrations.AddIndex(
            model_name='shopperformance',
            index=models.Index(fields=['total_revenue'], name='shop_perfor_total_r_c939cb_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='shopperformance',
            unique_together={('shop', 'period_start', 'period_end', 'period_type')},
        ),
        migrations.AddIndex(
            model_name='shopinventory',
            index=models.Index(fields=['shop', 'status'], name='shop_invent_shop_id_fdb6e7_idx'),
        ),
        migrations.AddIndex(
            model_name='shopinventory',
            index=models.Index(fields=['sold_date'], name='shop_invent_sold_da_f5abf6_idx'),
        ),
        migrations.AddIndex(
            model_name='shopinventory',
            index=models.Index(fields=['allocated_date'], name='shop_invent_allocat_497d9d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='shopinventory',
            unique_together={('shop', 'sim_card')},
        ),
        migrations.AddIndex(
            model_name='shopauditlog',
            index=models.Index(fields=['shop', 'created_at'], name='shop_audit__shop_id_cd0220_idx'),
        ),
        migrations.AddIndex(
            model_name='shopauditlog',
            index=models.Index(fields=['action_type'], name='shop_audit__action__40b922_idx'),
        ),
        migrations.AddIndex(
            model_name='shopauditlog',
            index=models.Index(fields=['user', 'created_at'], name='shop_audit__user_id_0b61bf_idx'),
        ),
        migrations.AddIndex(
            model_name='shop',
            index=models.Index(fields=['shop_code'], name='shops_shop_co_db2cdc_idx'),
        ),
        migrations.AddIndex(
            model_name='shop',
            index=models.Index(fields=['status'], name='shops_status_a77d69_idx'),
        ),
        migrations.AddIndex(
            model_name='shop',
            index=models.Index(fields=['region', 'city'], name='shops_region_6daf78_idx'),
        ),
        migrations.AddIndex(
            model_name='shop',
            index=models.Index(fields=['team'], name='shops_team_id_063229_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['po_number'], name='purchase_or_po_numb_656941_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['supplier', 'po_date'], name='purchase_or_supplie_823b06_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['shop', 'status'], name='purchase_or_shop_id_5fdbe0_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['status'], name='purchase_or_status_5ac239_idx'),
        ),
        migrations.AddIndex(
            model_name='productsale',
            index=models.Index(fields=['sale_number'], name='product_sal_sale_nu_5f95b9_idx'),
        ),
        migrations.AddIndex(
            model_name='productsale',
            index=models.Index(fields=['shop', 'sale_date'], name='product_sal_shop_id_2bfa78_idx'),
        ),
        migrations.AddIndex(
            model_name='productsale',
            index=models.Index(fields=['status'], name='product_sal_status_6a6c6a_idx'),
        ),
        migrations.AddIndex(
            model_name='productsale',
            index=models.Index(fields=['customer_phone'], name='product_sal_custome_9ebb9b_idx'),
        ),
        migrations.AddIndex(
            model_name='productinstance',
            index=models.Index(fields=['serial_number'], name='product_ins_serial__bdf510_idx'),
        ),
        migrations.AddIndex(
            model_name='productinstance',
            index=models.Index(fields=['barcode'], name='product_ins_barcode_5074b3_idx'),
        ),
        migrations.AddIndex(
            model_name='productinstance',
            index=models.Index(fields=['product', 'status'], name='product_ins_product_72c412_idx'),
        ),
        migrations.AddIndex(
            model_name='productinstance',
            index=models.Index(fields=['current_shop', 'status'], name='product_ins_current_ecd091_idx'),
        ),
        migrations.AddIndex(
            model_name='productcategory',
            index=models.Index(fields=['code'], name='product_cat_code_fe6111_idx'),
        ),
        migrations.AddIndex(
            model_name='productcategory',
            index=models.Index(fields=['parent_category'], name='product_cat_parent__89c1c0_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['product_code'], name='products_product_15b636_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category'], name='products_categor_4083ff_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['status'], name='products_status_a30e64_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['product_name'], name='products_product_97a29d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='lotmetadata',
            unique_together={('batch', 'lot_number')},
        ),
        migrations.AddConstraint(
            model_name='forumlike',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('topic__isnull', False), ('post__isnull', True)), models.Q(('topic__isnull', True), ('post__isnull', False)), _connector='OR'), name='topic_or_post_required'),
        ),
    ]
